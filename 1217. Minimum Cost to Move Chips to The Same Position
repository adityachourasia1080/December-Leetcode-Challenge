//M1--BRUTE FORCE  O(N^2)  && O(N)
class Solution {
public:
    int minCostToMoveChips(vector<int>& pos) {
        int n= pos.size();
        unordered_map<int,int> mp;
        for (int i=0;i<n;i++) mp[pos[i]]++;
        int ans= INT32_MAX,cost;
        for (auto x: mp)
        {
            cost=0;
            for (auto y: mp)
            {
                if (x.first==y.first)  continue;
                
                if (abs(x.first-y.first) %2!=0)  cost+= y.second;
            }
            ans=min(ans,cost);
        }
        return ans;
        
    }
};

//M2- SIMPLE LOGIC O(N)  && O(1)
// Idea is simple either we have to collect all coins to even pos or to odd position ,
// so just calculate 'mineven' ie the cost when coin has to be moved to even pos from odd
//' minodd' ie the cost when coin has to be moved from odd to even pos
// Since all the coins will be at even or odd pos after moving so take min of both.
class Solution {
public:
    int minCostToMoveChips(vector<int>& pos) {
        int mineven=0,minodd=0;
        for (int i=0;i<pos.size();i++)
        {
            if (pos[i] %2==0)  minodd+=1;
            if (pos[i] %2!=0)  mineven+=1;
        }
        return min(minodd,mineven);
        
    }
};
